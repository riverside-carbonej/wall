rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection - RESTRICTED ACCESS
    match /users/{userId} {
      // Users can ONLY read their own profile - no browsing other users
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // Users can only update their own profile
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Walls collection - main security rules
    match /walls/{wallId} {
      // Allow read only if:
      // 1. User is authenticated
      // 2. Wall is not soft deleted (deletedAt is null or doesn't exist)
      // 3. User has proper permissions
      allow read: if request.auth != null && 
        // Wall must not be soft deleted
        (!('deletedAt' in resource.data) || resource.data.deletedAt == null) && (
          // Owner access
          ('permissions' in resource.data && 
           'owner' in resource.data.permissions && 
           resource.data.permissions.owner == request.auth.uid) ||
          
          // Editor access
          ('permissions' in resource.data && 
           'editors' in resource.data.permissions && 
           resource.data.permissions.editors != null && 
           request.auth.uid in resource.data.permissions.editors) ||
          
          // Public access
          ('visibility' in resource.data && 
           'isPublished' in resource.data.visibility && 
           resource.data.visibility.isPublished == true && 
           'requiresLogin' in resource.data.visibility && 
           resource.data.visibility.requiresLogin == false)
        );
      
      // Allow create for authenticated users
      allow create: if request.auth != null &&
        // Must set owner to current user
        request.resource.data.permissions.owner == request.auth.uid &&
        // Must not be soft deleted on creation
        (!('deletedAt' in request.resource.data) || request.resource.data.deletedAt == null);
      
      // Allow update only for owners and editors
      allow update: if request.auth != null && (
        // Owner access
        ('permissions' in resource.data && 
         'owner' in resource.data.permissions && 
         resource.data.permissions.owner == request.auth.uid) ||
        
        // Editor access - but can't change ownership
        ('permissions' in resource.data && 
         'editors' in resource.data.permissions && 
         resource.data.permissions.editors != null && 
         request.auth.uid in resource.data.permissions.editors &&
         // Ensure editors can't change ownership
         request.resource.data.permissions.owner == resource.data.permissions.owner)
      );
      
      // Allow delete only for owners
      allow delete: if request.auth != null && 
        // Owner access only
        ('permissions' in resource.data && 
         'owner' in resource.data.permissions && 
         resource.data.permissions.owner == request.auth.uid);
    }
    
    // Wall items collection
    match /wall-items/{itemId} {
      // Allow read only if user has access to the parent wall
      allow read: if request.auth != null &&
        // Get the parent wall and check permissions
        (get(/databases/$(database)/documents/walls/$(resource.data.wallId)).data.permissions.owner == request.auth.uid ||
         ('editors' in get(/databases/$(database)/documents/walls/$(resource.data.wallId)).data.permissions &&
          get(/databases/$(database)/documents/walls/$(resource.data.wallId)).data.permissions.editors != null &&
          request.auth.uid in get(/databases/$(database)/documents/walls/$(resource.data.wallId)).data.permissions.editors));
      
      // Allow write only if user can edit the parent wall
      allow write: if request.auth != null &&
        // Get the parent wall and check edit permissions
        (get(/databases/$(database)/documents/walls/$(resource.data.wallId)).data.permissions.owner == request.auth.uid ||
         ('editors' in get(/databases/$(database)/documents/walls/$(resource.data.wallId)).data.permissions &&
          get(/databases/$(database)/documents/walls/$(resource.data.wallId)).data.permissions.editors != null &&
          request.auth.uid in get(/databases/$(database)/documents/walls/$(resource.data.wallId)).data.permissions.editors));
    }
    
    // User invites collection
    match /user_invites/{inviteId} {
      // Allow read if user is the invitee or has owner access to the wall
      allow read: if request.auth != null && (
        request.auth.token.email == resource.data.email ||
        get(/databases/$(database)/documents/walls/$(resource.data.wallId)).data.permissions.owner == request.auth.uid
      );
      
      // Allow create if user is the owner of the wall
      allow create: if request.auth != null &&
        get(/databases/$(database)/documents/walls/$(request.resource.data.wallId)).data.permissions.owner == request.auth.uid;
      
      // Allow update for accepting invites or wall owners
      allow update: if request.auth != null && (
        request.auth.token.email == resource.data.email ||
        get(/databases/$(database)/documents/walls/$(resource.data.wallId)).data.permissions.owner == request.auth.uid
      );
    }
    
    // Wall roles collection
    match /wall_roles/{roleId} {
      // Allow read if user is the owner of the parent wall
      allow read: if request.auth != null &&
        get(/databases/$(database)/documents/walls/$(resource.data.wallId)).data.permissions.owner == request.auth.uid;
      
      // Allow write if user is the owner of the parent wall
      allow write: if request.auth != null &&
        get(/databases/$(database)/documents/walls/$(resource.data.wallId)).data.permissions.owner == request.auth.uid;
    }
    
    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}